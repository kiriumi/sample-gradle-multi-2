apply plugin: 'distribution'
//apply plugin: 'java-library-distribution'

task preDistArchives { doLast {

    // アーカイブを作成していない場合は、何もしない
    if( !libsDirectory.getAsFile().get().exists() ) { return }

    // 公開Jar（Web）はWebアプリケーションに入るため、配布物から除外する
    if(plugins.hasPlugin('war') && plugins.hasPlugin('maven-publish')) { return }

    // 公開JarまたはWarの場合、アーカイブ名を取得する
    def deployJarsArray = (plugins.hasPlugin('maven-publish') || plugins.hasPlugin('war')) ? [ "${project.archivesBaseName}*" ] : deployJars.split()

    // Warの場合は、配置先ディレクトリ名をlibではなくwebにする
    def destDirName = plugins.hasPlugin('war') ? 'web' : 'lib'

    // デプロイ対象のアーカイブを配布ディレクトリにコピーする
    ant.copy(toDir: "${tmpDistsDir}/${destDirName}", preservelastmodified: 'true') {

        fileset(dir: libsDirectory.getAsFile().get()) {
            deployJarsArray.each { include(name: it) }
            if(deployJarsArray.size() == 0) { exclude(name: '*') }
        }
    }

}}

task preDistDependencies { doLast {

    // Warの場合、基盤Jarはサーバにデプロイしないため、除外
    if(plugins.hasPlugin('war')) { return }

    // 基盤Jarを配布ディレクトリにコピーする
    copy {
        from configurations.runtimeClasspath
        into file("${tmpDistsDir}/lib/dependencies")
        exclude 'base-*', 'biz-*' // 自分のプロジェクトで作成したJarは除外

        deployDependencies.split().each { include it }
        if(deployDependencies.isEmpty()) { exclude '*' }
    }

}}

task preDistBins { doLast {

    ant.copy(toDir: "${tmpDistsDir}/bin", preservelastmodified: 'true') {

        fileset(dir: "${serverReleaseDir}/bin") {
            deployBins.split().each { include(name: it) }
            if(deployBins.isEmpty()) { exclude(name: '*') }
        }

        // 該当のステージング環境のリソースに差替え
        if(stage.toLowerCase() == 'release') { return }

        fileset(dir: "${serverDir}/${stage}/bin") {
            deployBins.split().each { include(name: it) }
            if(deployBins.isEmpty()) { exclude(name: '*') }
        }
    }

}}

task preDistConfs { doLast {

    ant.copy(toDir: "${tmpDistsDir}/conf", preservelastmodified: 'true') {

        fileset(dir: "${serverReleaseDir}/conf") {
            deployConfs.split().each { include(name: it) }
            if(deployConfs.isEmpty()) { exclude(name: '*') }
        }

        // 該当のステージング環境のリソースに差替え
        if(stage.toLowerCase() == 'release') { return }

        fileset(dir: "${serverDir}/${stage}/conf") {
            deployConfs.split().each { include(name: it) }
            if(deployConfs.isEmpty()) { exclude(name: '*') }
        }
    }

}}

task preDist {
    dependsOn preDistArchives, preDistDependencies, preDistBins, preDistConfs
}

distributions {

    main {
        // ファイル名は、デプロイ先のルートディレクトリ名に合わせる
        // ∵サーバに転送後のリネームの手間を省くため
        distributionBaseName = deployRootDir

        contents {
            from tmpDistsDir
        }
    }
}

distZip.dependsOn preDist
