import java.time.format.DateTimeFormatter;

apply plugin: 'distribution'
//apply plugin: 'java-library-distribution'

ext {
     tmpDistsDir = buildDirectory.dir('tmpDistributions').get()
}

task preDistArchives { doLast {

    // 公開Jar（Web）はWebアプリケーションに入るため、配布物から除外する
    if(plugins.hasPlugin('war') && plugins.hasPlugin('maven-publish')) { return }

    // 公開JarまたはWarの場合、アーカイブ名名を取得する
    def deployJarsArray = (plugins.hasPlugin('maven-publish') || plugins.hasPlugin('war')) ? [ "${project.archivesBaseName}*.*" ] : deployJars.split()

    // Warの場合は、配置先ディレクトリ名をlibではなくwebにする
    def destDirName = plugins.hasPlugin('war') ? 'web' : 'lib'

    // デプロイ対象のアーカイブを配布ディレクトリにコピーする
    ant.copy(toDir: "${tmpDistsDir}/${destDirName}", preservelastmodified: 'true') {

        fileset(dir: libsDirectory.getAsFile().get()) {
            deployJarsArray.each { include(name: it) }
            if(deployJarsArray.size() == 0) { exclude(name: '*') }
        }
    }

    // デプロイ対象の基盤Jarを配布ディレクトリにコピーする
    if(!project.hasProperty('deployDependencies')) { return }
    copy {
        from configurations.runtimeClasspath
        into file("${tmpDistsDir}/lib/dependencies")
        exclude 'base-*', 'biz-*' // 自分のプロジェクトで作成したJarは除外

        deployDependencies.split().each { include it }
        if(deployDependencies.isEmpty()) { exclude '*' }
    }

}}

task preDistBins { doLast {

    if(!project.hasProperty('deployBins')) { return }

    ant.copy(toDir: "${tmpDistsDir}/bin", preservelastmodified: 'true') {

        fileset(dir: "${serverReleaseDir}/bin") {
            deployBins.split().each { include(name: it) }
            if(deployBins.isEmpty()) { exclude(name: '*') }
        }

        // 該当のステージング環境のリソースに差替え
        if(stage.toLowerCase() == 'release') { return }

        fileset(dir: "${serverDir}/${stage}/bin") {
            deployBins.split().each { include(name: it) }
            if(deployBins.isEmpty()) { exclude(name: '*') }
        }
    }

}}

task preDistConfs { doLast {

    if(!project.hasProperty('deplohConfs')) { return }

    ant.copy(toDir: "${tmpDistsDir}/conf", preservelastmodified: 'true') {

        fileset(dir: "${serverReleaseDir}/conf") {
            deplohConfs.split().each { include(name: it) }
            if(deplohConfs.isEmpty()) { exclude(name: '*') }
        }

        // 該当のステージング環境のリソースに差替え
        if(stage.toLowerCase() == 'release') { return }

        fileset(dir: "${serverDir}/${stage}/conf") {
            deplohConfs.split().each { include(name: it) }
            if(deplohConfs.isEmpty()) { exclude(name: '*') }
        }
    }

}}

task preDist {
    dependsOn preDistArchives , preDistBins, preDistConfs
}

distributions {

    main {
        def now = LocalDateTime.now();
        def formatter = DateTimeFormatter.ofPattern('yyyyMMddHHmmss')

        distributionBaseName = "${project.name}-${formatter.format(now)}"

        contents {
            from tmpDistsDir
        }
    }
}

distZip.dependsOn preDist
