import java.time.format.DateTimeFormatter;

apply plugin: 'distribution'
//apply plugin: 'java-library-distribution'

ext {
     tmpDistsDir = buildDirectory.dir('tmpDistributions').get()
}

task preDistWar { doLast {

    if(plugins.hasPlugin('war')) {
        // Webアプリケーションの場合
        copy {
            from libsDirectory
            into file("${tmpDistsDir}/web")
        }
    }
}}

task preDistJars { doLast {

    if(!plugins.hasPlugin('war')) {

        copy {
            from libsDirectory
            into file("${tmpDistsDir}/lib")

            deployJars.split().each {
                include it
            }

            if(deployJars.isEmpty()) {
                exclude '*'
            }
        }

        copy {
            from configurations.runtimeClasspath
            into file("${tmpDistsDir}/lib/dependencies")
            exclude 'base-*', 'biz-*' // 自分のプロジェクトで作成したJarは除外

            deployDependencies.split().each {
                include it
            }

            if(deployDependencies.isEmpty()) {
                exclude '*'
            }
        }
    }
}}

task preDistBins { doLast{

    copy {
        from "${serverReleaseDir}/bin"

        // 該当のステージング環境のリソースに差替え
        if(stage.toLowerCase() != 'release') {
            from "${serverDir}/${stage}/bin"
        }

        deployBins.split().each {
            include it
        }

        if(deployBins.isEmpty()) {
            exclude '*'
        }

        into "${tmpDistsDir}/bin"
    }
}}

task preDistConfs { doLast{

    copy {
        from "${serverReleaseDir}/conf"

        // 該当のステージング環境のリソースに差替え
        if(stage.toLowerCase() != 'release') {
            from "${serverDir}/${stage}/conf"
        }

        deplohConfs.split().each {
            include it
        }

        if(deplohConfs.isEmpty()) {
            exclude '*'
        }

        into "${tmpDistsDir}/conf"
    }
}}


task preDist {
    dependsOn preDistWar, preDistJars , preDistBins, preDistConfs
}

distributions {

    main {
        def now = LocalDateTime.now();
        def formatter = DateTimeFormatter.ofPattern('yyyyMMddHHmmss')

        distributionBaseName = "${project.name}-${formatter.format(now)}"

        contents {
            from tmpDistsDir
        }
    }
}

distZip.dependsOn preDist
