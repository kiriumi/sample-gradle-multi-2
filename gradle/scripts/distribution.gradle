import java.time.format.DateTimeFormatter;

apply plugin: 'distribution'
//apply plugin: 'java-library-distribution'

ext {
     tmpDistsDir = buildDirectory.dir('tmpDistributions').get()
}

task preDistArchives { doLast {

    // 公開するWebアプリケーションは、WebアプリケーションのWEB-INF/libに入れるため、配布物にしない
    if(plugins.hasPlugin('war') && plugins.hasPlugin('maven-publish')) { return }

    copy {
        from libsDirectory
        into file("${tmpDistsDir}/lib")

        if(project.hasProperty('deployJars')) {

            deployJars.split().each {
                include it
            }

            if(deployJars.isEmpty()) {
                exclude '*'
            }
        }
    }

    if(!project.hasProperty('deployDependencies')) { return }

    copy {
        from configurations.runtimeClasspath
        into file("${tmpDistsDir}/lib/dependencies")
        exclude 'base-*', 'biz-*' // 自分のプロジェクトで作成したJarは除外

        deployDependencies.split().each {
            include it
        }

        if(deployDependencies.isEmpty()) {
            exclude '*'
        }
    }

}}

task preDistBins { doLast{

    if(!project.hasProperty('deployBins')) { return }

    copy {
        from "${serverReleaseDir}/bin"

        // 該当のステージング環境のリソースに差替え
        if(stage.toLowerCase() != 'release') {
            from "${serverDir}/${stage}/bin"
        }

        deployBins.split().each {
            include it
        }

        if(deployBins.isEmpty()) {
            exclude '*'
        }

        into "${tmpDistsDir}/bin"
    }
}}

task preDistConfs { doLast{

    if(!project.hasProperty('deplohConfs')) { return }

    copy {
        from "${serverReleaseDir}/conf"

        // 該当のステージング環境のリソースに差替え
        if(stage.toLowerCase() != 'release') {
            from "${serverDir}/${stage}/conf"
        }

        deplohConfs.split().each {
            include it
        }

        if(deplohConfs.isEmpty()) {
            exclude '*'
        }

        into "${tmpDistsDir}/conf"
    }
}}

task preDist {
    dependsOn preDistArchives , preDistBins, preDistConfs
}

/*
 * Jar, Warのみを作成するタスク
 * ※ Assembleタスクだと、distZipも実行されてしまうため
 */
task archive {
    dependsOn jar
    if(plugins.hasPlugin('war')) {
        dependsOn war
    }
}

distributions {

    main {
        def now = LocalDateTime.now();
        def formatter = DateTimeFormatter.ofPattern('yyyyMMddHHmmss')

        distributionBaseName = "${project.name}-${formatter.format(now)}"

        contents {
            from tmpDistsDir
        }
    }
}

distZip.dependsOn preDist
